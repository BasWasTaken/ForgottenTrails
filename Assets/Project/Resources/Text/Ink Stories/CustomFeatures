INCLUDE Lists
//BEGIN LIST Unity functionality

EXTERNAL Print(string)
// send text to unity console as message
=== function Print(value) 
<<i>Log: {value}</i>>

EXTERNAL PrintWarning(string)
// send text to unity console as warning
=== function PrintWarning(value)
<<i>LogWarning: {value}</i>>

EXTERNAL Halt(float) 
// [EXPERIMENTAL] pause text for x seconds 
=== function Halt(duration) 
<<i>Halt: {duration}</i>> 

EXTERNAL Clear()
 // Clears the textbox and moves that text to log
=== function Clear()
<<i>Clear Page</i>>

VAR stop = "\{stop\}" // Used in Unity for stopping the continue loop

VAR glue = "\{glue\}" // used to glue next line to this.

VAR aglue = "\{aglue\}" // used to glue this to previous line

VAR spd = 1.0 
EXTERNAL Spd(float) 
// [TEMPRAMENTAL] change the text speed 
=== function Spd(value) //positive number, expressed as multiplier (eg .8 for 80%)
~spd=value

EXTERNAL Bg(string,duration)
 // sets background to image by fading. 
 // Note that it is in early stages and yo ucan probably break it quite easily by calling it quickly in a row.
=== function Bg(image, duration) // duration in seconds (e.g. 0.5)
<<i>Backdrop: {image}</i>> 

EXTERNAL FadeTo(string, duration)
 // fade to a color
=== function FadeTo(color, duration) // duration in seconds (e.g. 0.5)
<<i>Fade to {color}</i>> 

EXTERNAL Sprites(string)
// sets sprites for characters, etc. 
=== function Sprites(images) //If multiple sprites, separated by comma.
<<i>Images: {images}</i>> 

EXTERNAL Vox(string, float)
// plays audio on voice channel, unlooped
=== function Vox(clip, volume) // use volume between 0.0 and 1.0
<<i>Vox: {clip}</i>> 
// note to self: could perhaps also play appropriate sound when someone is speaking via use of inky tags

EXTERNAL Sfx(string, float)
// plays audio on sfx channel, unlooped
=== function Sfx(clip, volume) // use volume between 0.0 and 1.0
<<i>Sfx: {clip}</i>>

EXTERNAL Ambiance(string, float)
// plays audio on ambiance channel, looping
=== function Ambiance(clip, volume) //use "" to stop loop.  use volume between 0.0 and 1.0
<<i>Ambiance: {clip}</i>>

EXTERNAL Music(string, float)
// plays audio on music channel, looping
=== function Music(clip, volume) //use "" to stop audio. use volume between 0.0 and 1.0
<<i>Music: {clip}</i>>

// Helper function: popping elements from lists
=== function Pop(ref list)
   ~ temp x = LIST_MIN(list) 
   ~ list -= x 
   ~ return x

// System: looping time of day

LIST TimeOfDay = (Night), Dawn, Morning, Midday, Afternoon, Dusk, Evening

=== function AdvanceTime // used to progress time 1 or loop back around.
{ TimeOfDay == 7:
	~ TimeOfDay = 1
- else:
	~ TimeOfDay ++ 
}   
 
//
// System: inventory
//
VAR Inventory = ()
~ Inventory = Items()

=== function AddInUnity(Item)

EXTERNAL AddInUnity(Item)

=== function Add(Item)
    ~ Inventory += Item
    ~ AddInUnity(Item)
    ~ Print("Picked up " + Item)

=== function Use(ItemOrTrait)
\{Use({ItemOrTrait})\}

VAR UsedItem = ()
~ UsedItem = Items()

=== function RemoveInUnity(Item)

EXTERNAL RemoveInUnity(Item)

=== function Remove(Item)
    {Inventory has Item:
        ~ Inventory -= Item
        ~ RemoveInUnity(Item)
        //~ Print("Removed " + Item)
    - else:
        PrintWarning("Attempted to remove an item that wasn't there!")
    }
    
    

    
    
VAR CurrentLocation = ()

~ CurrentLocation = Locations()

VAR PreviousLocation = () 

~ PreviousLocation = Locations ()

VAR VisitedEver = ()

~ VisitedEver = Locations()

=== function SetLocation(Location) ===
~ PreviousLocation = Locations()
~ PreviousLocation += CurrentLocation
~ CurrentLocation = Locations()
~ CurrentLocation += Location
~ VisitedEver += Location

=== function HasVisited(Location) ===
~return VisitedEver ? Location

=== function MapOption(Destination)
~SetLocation(Destination)
    ~ return "\{TravelTo({Destination})\}"
    
    
    
    
    
    
    

// System: Incremental knowledge.
// Each list is a chain of facts. Each fact supersedes the fact before 
//

VAR knowledgeState = ()

=== function Knows (x) 
   ~ return knowledgeState ? x 

=== function KnowledgeStateBetween(x, y) 
   ~ return knowledgeState? x && not (knowledgeState ^ y)

=== function Learn(statesToSet) 
   ~ temp x = Pop(statesToSet)
   {
   - not x: 
      ~ return false 

   - not Knows(x):
      ~ temp chain = LIST_ALL(x)
      ~ temp statesGained = LIST_RANGE(chain, LIST_MIN(chain), x)
      ~ knowledgeState += statesGained
      ~ Learn (statesToSet) 	// set any other states left to set
      ~ return true  	       // and we set this state, so true
 
    - else:
      ~ return false || Learn(statesToSet) 
    }	

=== function isAre(list)
	{LIST_COUNT(list) == 1:is|are}






// 



// This is the list of vars for the gender stuff, but that's also not really well implemented yet of course.
VAR PlayerName = "PlayerName"


VAR players_gender = "Undefined"
VAR players_eyecolor = "Undefined"
VAR players_hair = "Undefined"
VAR players_hair_color = "Undefined"
VAR players_hair_style = "Undefined"

VAR androgynous = "androgynous"
VAR they = "they"
VAR them = "them"
VAR their = "their"
VAR theirs = "theirs"
VAR Mx = "Mx"
VAR master = "master"
VAR person = "person"
VAR kid = "kid"
VAR lad = "lass"
VAR guy = "guy"



