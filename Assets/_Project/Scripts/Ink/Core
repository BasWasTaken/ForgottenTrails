
//
// SYSTEM: Incremental knowledge tracking.
// Allows tracking of what the player has witnessed throughout the game. Used by distinct LISTs. Each LIST is a chain of facts. Each fact supersedes the fact before. 
//
VAR knowledgeState = ()

=== function Knows (fact) // check if fact is present in knowledge state, e.i. if it is known information
   ~ return knowledgeState ? fact 

=== function KnowledgeStateBetween(factX, factY) // used to check if knowledge state is between two specific points
   ~ return knowledgeState? factX && not (knowledgeState ^ factY)

=== function Learn(facts)  // used to "learn" (i.e. add to knowledge state) a fact, and all facts before it (since they are incremental)
   ~ temp x = _Pop(facts)
   {
   - not x: 
      ~ return false 

   - not Knows(x):
      ~ temp chain = LIST_ALL(x)
      ~ temp statesGained = LIST_RANGE(chain, LIST_MIN(chain), x)
      ~ knowledgeState += statesGained
      ~ Learn (facts) 	// set any other states left to set
      ~ return true  	       // and we set this state, so true
 
    - else:
      ~ return false || Learn(facts) 
    }	
    

//
// SYSTEM: affection tracking
// Tracking numeric value for relationship between pc and other characters, and using cutoff points to determine friendly, hostile etc.
// Can be compared simply by asking e.g.: {AFFHenry >= friendly}
//



LIST Attitudes = devoted = 100, alligned = 75, friendly = 60, ambivalent = 50, begrudging = 40, hostile = 25, spiteful = 0

=== function GetAttitude(value) ===
{
-   value >= LIST_VALUE(devoted):
    ~ return devoted
-   value >= LIST_VALUE(alligned):
    ~ return alligned
-   value >= LIST_VALUE(friendly):
    ~ return friendly
-   value >= LIST_VALUE(ambivalent):
    ~ return ambivalent
-   value >= LIST_VALUE(begrudging):
    ~ return begrudging
-   value >= LIST_VALUE(hostile):
    ~ return hostile
-   else:
    ~ return spiteful
}

//
// SYSTEM: looping time of day
// Unity currently does nothing with this feature.
//
LIST TimeOfDay = (Night), Dawn, Morning, Midday, Afternoon, Dusk, Evening

=== function AdvanceTime() // used to progress time 1 or loop back around.
{ TimeOfDay == 7:
	~ TimeOfDay = 1
- else:
	~ TimeOfDay ++ 
}   
 
