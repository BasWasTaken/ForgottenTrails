//
// SYSTEM: Map
// The map will consist of a ink knot that contains choices to unlocked locations. All of these will be caught by Unity and displayed as visual items on a map screen, which is opened and closed as the knot is accessed and left.
//
=== MapScreen (-> returnTo) // the map knot. visit to open the map in unity.
\{UNITY:OpenMap()\}
+ [{MapChoice(EdanCastle)}] // for testing
    -> TravelingTo(CastleEntrance)
+ { HasVisited(EdanCastle)} [{MapChoice(EdanCastle)}] 
    -> TravelingTo(CastleEntrance)
+ { HasVisited(sampleCave)} [{MapChoice(sampleCave)}] 
    -> TravelingTo(sampleCave)
+ [Put the map away]

\{Unity.CloseMap()\}
    -> returnTo
    
=== function MapChoice(destination) === // used to present an inky choice that will be represented visually on a map in unity. )in ink it simply lists as a normal choice)
\{MapChoice({destination})\}

=== TravelingTo(targetLocation) === // used for traveling from a to b via the map. instead of immediately warping, there will be some animation, chance for encounter, use of rations, etc.
~ TargetLocation = targetLocation
~ SetLocation(onTheRoad)
~ travelRations--
{
- travelRations == 0:
    -> Death
- travelRations < lowRationsLimit:
    -> InsertComplaint
- else:
    You eat yummy rations.
} 
{~ -> RandomTravelEvent -> TargetLocation | -> TargetLocation} 


VAR lowRationsLimit = 9 


=== InsertComplaint ===
You {LIST_COUNT(Party)>1:and your party} are growing {|ever more }hungry.
->->

=== RandomTravelEvent ===
A wild PokÃ©mon appears!
->->
